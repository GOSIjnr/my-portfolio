<div class="search-input">
	<input class="search-input__field" type="text" value="@_inputValue" placeholder="@Placeholder"
		@oninput="HandleInput" />

	@if (!string.IsNullOrEmpty(_inputValue))
	{
		<button class="search-input__clear-button" type="button" @onclick="ClearInput" aria-label="Clear search" />
	}
</div>

@code {
	[Parameter, EditorRequired] public string Placeholder { get; set; } = "";
	[Parameter] public string Search { get; set; } = string.Empty;
	[Parameter] public int DelayInMilliSeconds { get; set; } = 400;
	[Parameter] public EventCallback<string> SearchChanged { get; set; }

	private string _inputValue = string.Empty;
	private CancellationTokenSource? _debounceCts;

	protected override void OnParametersSet()
	{
		_inputValue = Search;
	}

	private async void HandleInput(ChangeEventArgs e)
	{
		_inputValue = e.Value?.ToString() ?? string.Empty;

		_debounceCts?.Cancel();
		_debounceCts = new CancellationTokenSource();
		var token = _debounceCts.Token;

		try
		{
			await Task.Delay(DelayInMilliSeconds, token);

			if (!token.IsCancellationRequested)
			{
				await CallSearchChanged();
			}
		}
		catch (TaskCanceledException) { }
	}

	private async Task CallSearchChanged()
	{
		if (SearchChanged.HasDelegate)
		{
			await SearchChanged.InvokeAsync(_inputValue);
		}
	}

	private async void ClearInput()
	{
		_debounceCts?.Cancel();

		_inputValue = string.Empty;
		await CallSearchChanged();
	}
}
