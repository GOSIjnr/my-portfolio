<div class="info-card @(_isCardExpanded ? "info-card--expanded" : "")">
	<div class="info-card__left">
		<p class="info-card__header @(_isCardExpanded ? "info-card__header--expanded" : "")">@_header</p>

		<div class="info-card__body-holder">
			<h3 class="info-card__body @(_isCardExpanded ? "info-card__body--expanded" : "")">@_body</h3>
		</div>

		<p class="info-card__footer @(_isCardExpanded ? "info-card__footer--expanded" : "")">@_footer</p>
	</div>

	@if (_isLongText && !ForceExpanded)
	{
		<div class="info-card__right">
			<button class="info-card__read-more" @onclick="HandleReadMore">
				@(_isCardExpanded ? "Show Less" : "Read More")
			</button>
		</div>
	}
</div>

@code {
	[EditorRequired, Parameter] public InfoCardModel InfoCardData { get; set; } = new();
	[Parameter] public bool IsExpanded { get; set; } = false;
	[Parameter] public bool ForceExpanded { get; set; } = false;

	[Parameter] public EventCallback OnReadMoreClicked { get; set; }

	private string _header => InfoCardData.Header;
	private string _body => InfoCardData.Body;
	private string _footer => InfoCardData.Footer;

	private bool _internalExpanded;
	private bool _isLongText => new[] { _header, _body, _footer }.Any(s => s?.Length > 25);
	private bool _isCardExpanded => ForceExpanded || _internalExpanded || IsExpanded;

	private async Task HandleReadMore()
	{
		if (OnReadMoreClicked.HasDelegate)
		{
			await OnReadMoreClicked.InvokeAsync();
		}
		else
		{
			_internalExpanded = !_internalExpanded;
		}
	}
}
