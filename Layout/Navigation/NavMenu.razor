@inject IJSRuntime Js
@implements IDisposable

<nav class="top-nav">
    <div class="nav-container">
        <NavBrand Brand="@AppLayoutData.NavigationBrandData" />

        <div class="nav-center">
            @foreach (NavLinkItemData item in AppLayoutData.NavigationLinkItems)
            {
                <NavLinkItem DisplayText="@item.DisplayText"
                    TargetUrl="@item.GetFormattedTargetUrl(TargetUrlFormat.HashPrefix)" CssClassName="@item.CssClassName" />
            }
        </div>

        <div class="nav-right">
            <NavLinkItem DisplayText="@AppLayoutData.ContactNavigationLink.DisplayText"
                TargetUrl="@AppLayoutData.ContactNavigationLink.GetFormattedTargetUrl(TargetUrlFormat.HashPrefix)"
                CssClassName="@AppLayoutData.ContactNavigationLink.CssClassName" />
        </div>

        <button class="menu-toggle" @onclick="ToggleSidebar">☰</button>
    </div>
</nav>

<SideMenu IsOpened="@isSidebarOpen" OnClose="@ToggleSidebar" />

@code {
    private DotNetObjectReference<NavMenu>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("resizeNotifier.registerResizeCallback", dotNetRef);
        }
    }

    [JSInvokable]
    public void OnResize(int width)
    {
        if (width > 920 && isSidebarOpen)
        {
            isSidebarOpen = false;
            StateHasChanged();
        }
    }

    private bool isSidebarOpen = false;
    private void ToggleSidebar() => isSidebarOpen = !isSidebarOpen;

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
