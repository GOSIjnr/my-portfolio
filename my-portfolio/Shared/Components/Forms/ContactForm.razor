@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="contact-form">
	@if (!string.IsNullOrEmpty(StatusMessage))
	{
		<div class="toast show position-fixed bottom-0 end-0 m-3" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="toast-header bg-@StatusType text-white">
				<strong class="me-auto">Message</strong>
				<small>Now</small>
				<button type="button" class="btn-close" data-bs-dismiss="toast"></button>
			</div>
			<div class="toast-body">@StatusMessage</div>
		</div>
	}

	<EditForm Model="_formModel" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />

		<h2 class="contact-form__title">@ContactFormLayout.Heading</h2>
		<p class="contact-form__subtitle">@ContactFormLayout.SubHeading</p>

		<div class="contact-form__fields">
			<div class="contact-form__group">
				<InputText class="contact-form__input" placeholder="First name" @bind-Value="_formModel.FirstName" />
			</div>

			<div class="contact-form__group">
				<InputText class="contact-form__input" placeholder="Last name" @bind-Value="_formModel.LastName" />
			</div>

			<div class="contact-form__group">
				<InputText class="contact-form__input" placeholder="Email address" @bind-Value="_formModel.Email" />
			</div>

			<div class="contact-form__group">
				<InputText class="contact-form__input"
					placeholder="Reason for contact (e.g., hiring, question, feedback)"
					@bind-Value="_formModel.Reason" />
			</div>

			<div class="contact-form__group contact-form__group--full contact-form__service-group">
				<label class="contact-form__service-label" for="serviceSearch">Select a service</label>

				<div class="contact-form__service-search-wrapper">
					<SearchInput @bind-Search="serviceSearch" Delay="400" Placeholder="Search services..." />
				</div>

				<div class="contact-form__radio-group" role="radiogroup" aria-label="Services">
					@foreach (string? service in FilteredServices)
					{
						<ServiceRadioCard Service="@service" Selected="(_formModel.Service == service)"
							OnSelect="OnServiceSelected" />
					}
				</div>
			</div>

			<div class="contact-form__group contact-form__group--full">
				<InputTextArea class="contact-form__textarea" placeholder="Type your message here."
					@bind-Value="_formModel.Message" />
			</div>
		</div>

		<div class="contact-form__error-wrapper">
			<ValidationSummary class="contact-form__error" />
		</div>
		<!-- üêù Honeypot Trap - Hidden from users -->
		<div style="display:none;">
			<InputText @bind-Value="_honeypot" />
		</div>

		<button class="contact-form__submit" disabled="@IsSubmitting">
			@(IsSubmitting ? "Sending..." : "Send Message")
		</button>
	</EditForm>
</div>

@code {
	[Parameter] public ContactFormLayout ContactFormLayout { get; set; } = new();
	[Parameter] public List<string> ServicesNames { get; set; } = new();
	[Parameter] public string SelectedService { get; set; } = "";

	private ContactFormModel _formModel = new();
	private string serviceSearch = "";
	private bool IsSubmitting = false;

	private string? StatusMessage;
	private string StatusType = "primary";

	private string _honeypot = "";
	private DateTime _lastSentTime = DateTime.MinValue;

	private IEnumerable<string> FilteredServices => string.IsNullOrWhiteSpace(serviceSearch)
	? ServicesNames
	: ServicesNames.Select(s => new
	{
		Name = s,
		Score = Fuzz.PartialRatio(serviceSearch.ToLower().RemoveEmptySpaces(),
	s.ToLower().RemoveEmptySpaces())
	})
	.Where(x => x.Score > 60)
	.OrderByDescending(x => x.Score)
	.Select(x => x.Name);

	protected override void OnInitialized()
	{
		if (!string.IsNullOrWhiteSpace(SelectedService))
		{
			_formModel.Service = SelectedService;
		}
	}

	private void OnServiceSelected(string selectedService)
	{
		_formModel.Service = selectedService;
	}

	private async void HandleValidSubmit()
	{
		if (!string.IsNullOrEmpty(_honeypot))
		{
			ShowToast("‚ùå Submission blocked (possible spam).", "danger");
			return;
		}

		if ((DateTime.Now - _lastSentTime).TotalSeconds < 30)
		{
			ShowToast("Please wait before sending another message.", "warning");
			return;
		}

		IsSubmitting = true;

		try
		{
			await SendEmailAsync();
			_lastSentTime = DateTime.Now;
			ShowToast("‚úÖ Message sent successfully!", "success");
			_formModel = new();
		}
		catch (Exception ex)
		{
			ShowToast($"‚ùå Failed to send message: {ex.Message}", "danger");
		}
		finally
		{
			IsSubmitting = false;
			_honeypot = "";
		}
	}

	private async Task SendEmailAsync()
	{
		var payload = new
		{
			service_id = "YOUR_SERVICE_ID",
			template_id = "YOUR_TEMPLATE_ID",
			user_id = "YOUR_PUBLIC_KEY",
			template_params = new
			{
				reason = _formModel.Reason,
				name = _formModel.FirstName + " " + _formModel.LastName,
				email = _formModel.Email,
				service = _formModel.Service,
				message = _formModel.Message,
				time = DateTime.Now.ToString("f")
			}
		};

		var response = await Http.PostAsJsonAsync("https://api.emailjs.com/api/v1.0/email/send", payload);

		if (!response.IsSuccessStatusCode)
		{
			var error = await response.Content.ReadAsStringAsync();
			throw new Exception($"Email sending failed: {error}");
		}
	}

	private void ShowToast(string message, string type)
	{
		StatusMessage = message;
		StatusType = type;
		StateHasChanged();

		_ = Task.Delay(5000).ContinueWith(_ =>
		{
			StatusMessage = null;
			InvokeAsync(StateHasChanged);
		});
	}
}