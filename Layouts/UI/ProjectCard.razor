<div class="project-card">
    <div class="project-card__info">
        <div class="project-card__number">@((ProjectNo + 1).ToString("D2"))</div>

        <h2 class="project-card__title">@ProjectInfo.Title</h2>
        <p class="project-card__description">@ProjectInfo.Description</p>
        <p class="project-card__tech">@string.Join(", ", ProjectInfo.Technologies)</p>

        <div class="project-card__buttons">
            @if (ProjectInfo.LiveLink is not null)
            {
                <a class="project-card__button" href="@ProjectInfo.LiveLink.Link" target="_blank">Live</a>
            }

            @foreach (LinkInfo link in ProjectInfo.OtherLinks)
            {
                <a class="project-card__button" href="@link.Link" target="_blank">@link.Title</a>
            }
        </div>
    </div>

    <div class="project-card__media">
        <img class="project-card__image" src="@ProjectInfo.ImageUrl" alt="@ProjectInfo.Title" />

        <div class="project-card__nav">
            <button @onclick="Previous" disabled="@IsFirst" class="project-card__nav-button">
                <div class="project-card__nav-button-icon project-card__nav-button-icon--left" />
            </button>
            <button @onclick="Next" disabled="@IsLast" class="project-card__nav-button">
                <div class="project-card__nav-button-icon project-card__nav-button-icon--right" />
            </button>
        </div>
    </div>
</div>


@code {
    [Parameter] public int ProjectNo { get; set; }
    [Parameter] public EventCallback<int> ProjectNoChanged { get; set; }

    [Parameter, EditorRequired] public ProjectInfo ProjectInfo { get; set; } = new();
    [Parameter] public int TotalProjects { get; set; }

    private bool IsFirst => ProjectNo == 0;
    private bool IsLast => ProjectNo == TotalProjects - 1;

    private async Task Previous()
    {
        if (!IsFirst)
        {
            await ProjectNoChanged.InvokeAsync(ProjectNo - 1);
        }
    }

    private async Task Next()
    {
        if (!IsLast)
        {
            await ProjectNoChanged.InvokeAsync(ProjectNo + 1);
        }
    }
}
