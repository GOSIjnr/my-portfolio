@implements IDisposable

<nav class="nav-bar">
    <div class="nav-bar__container">
        <Brand BrandInfo="@AppLayoutData.BrandInfo" />

        <div class="nav-bar__links">
            @foreach (NavigationItem item in AppLayoutData.NavigationLinks)
            {
                <NavLinkItem NavigationLinkInfo="item" LinkType="TargetUrlFormat.SlashPrefix" />
            }
        </div>

        <div class="nav-bar__contact-link">
            <NavLinkItem NavigationLinkInfo="@AppLayoutData.ContactLink" />
        </div>

        <button type="button" class="nav-bar__toggle-btn nav-bar__toggle-btn--mask" title="Close menu"
            @onclick="ToggleSidebar" />
    </div>

    <SideMenu IsOpened="@isSidebarOpen" OnClose="@ToggleSidebar" />
</nav>

@code {
    private DotNetObjectReference<NavMenu>? dotNetRef;

    [Inject] private IJSRuntime Js { get; set; } = null!;
    [Inject] private IAppLayoutData AppLayoutData { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("resizeNotifier.registerResizeCallback", dotNetRef);
        }
    }

    [JSInvokable]
    public void OnResize(int width)
    {
        if (width >= 992 && isSidebarOpen)
        {
            isSidebarOpen = false;
            StateHasChanged();
        }
    }

    private bool isSidebarOpen = false;
    private void ToggleSidebar() => isSidebarOpen = !isSidebarOpen;

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
