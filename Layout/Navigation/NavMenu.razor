@implements IDisposable

<nav class="nav-bar">
    <div class="nav-bar__container">
        <Brand BrandInfo="@AppContent.User.Brand" />

        <div class="nav-bar__links">
            @foreach (NavigationItem item in _navigationLinks)
            {
                <NavLinkItem NavigationLinkInfo="item" LinkType="TargetUrlFormat.SlashPrefix" />
            }

            <div class="nav-bar__contact-link">
                <NavLinkItem NavigationLinkInfo="@AppContent.Layout.ContactMeLink" />
            </div>
        </div>

        <button type="button" class="nav-bar__toggle-btn nav-bar__toggle-btn--mask" title="Close menu"
            @onclick="ToggleSidebar" />
    </div>

    <SideMenu IsOpened="@_isSidebarOpen" OnClose="@ToggleSidebar" />
</nav>

@code {
    [Inject] private IJSRuntime Js { get; set; } = null!;
    [Inject] private AppContent AppContent { get; set; } = null!;

    [JSInvokable]
    public void OnResize(int width)
    {
        if (width >= 992 && _isSidebarOpen)
        {
            _isSidebarOpen = false;
            StateHasChanged();
        }
    }

    private bool _isSidebarOpen = false;
    private void ToggleSidebar() => _isSidebarOpen = !_isSidebarOpen;
    private DotNetObjectReference<NavMenu>? _objectRefrence;

    private List<NavigationItem> _navigationLinks => AppContent.Layout.NavigationLinks;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectRefrence = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("resizeNotifier.registerResizeCallback", _objectRefrence);
        }
    }

    public void Dispose()
    {
        _objectRefrence?.Dispose();
    }
}
