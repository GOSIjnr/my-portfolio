@using MyPortfolio.Adapters.InfoCard
@using MyPortfolio.Contracts.InfoCard
<div class="experience-section">
    <h2 class="experience-section__heading">My Experience</h2>
    <p class="experience-section__description">@_description</p>

    <div class="experience-section__grid">
        @foreach (InfoCardViewModel? cardData in _adaptedExperienceCards)
        {
            if (cardData is null) continue;
            <InfoCard InfoCardData="@cardData" OnReadMoreClicked="@(() => ShowModal(cardData))" />
        }
    </div>
</div>

<Modal IsVisible="@showModal" IsVisibleChanged="@(value => showModal = value)">
    @if (selectedCard is not null)
    {
        <InfoCard InfoCardData="@selectedCard" ForceExpanded="true" />
    }
</Modal>

@code {
    [Inject] private PortfolioData? AppContent { get; set; }

    private List<InfoCardViewModel> _adaptedExperienceCards = [];
    private InfoCardViewModel? selectedCard = null;
    private bool showModal = false;

    private string _description => AppContent?.User.ResumeSectionIntro.Experience ?? string.Empty;
    private List<InfoEventBase> _experienceCards => AppContent?.User?.ExperienceEvents ?? [];

    protected override void OnParametersSet()
    {
        _adaptedExperienceCards = InfoCardAdapterResolver.AdaptList(_experienceCards);
    }

    private void ShowModal(InfoCardViewModel card)
    {
        selectedCard = card;
        showModal = true;
    }
}
