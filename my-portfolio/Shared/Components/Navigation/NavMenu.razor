@implements IDisposable

<nav class="nav-bar">
    <div class="nav-bar__container">
        <Brand BrandInfo="@_brand" />

        <div class="nav-bar__links">
            @foreach (NavigationLinkInfo? item in _navigationLinks)
            {
                if (item is null) continue;
                <NavLinkItem NavigationLinkInfo="item" ExternalLinkType="TargetUrlFormat.Plain" />
            }

            <div class="nav-bar__contact-link">
                <NavLinkItem NavigationLinkInfo="@_contactMeLink" ExternalLinkType="TargetUrlFormat.Plain"
                    OnNavItemClick="ShowContactModal" IsButton="true" />
            </div>
        </div>

        <button type="button" class="nav-bar__toggle-btn nav-bar__toggle-btn--mask" title="Toggle menu"
            @onclick="ToggleSidebar" />
    </div>

    <SideMenu IsOpened="@_isSidebarOpen" OnClose="@ToggleSidebar" OnContactMeClick="ShowContactModal" />

    <Modal IsVisible="@_isContactModalVisible" IsVisibleChanged="@OnModalVisibilityChanged" ModalTitle="Let's Connect">
        <ContactForm ContactFormLayout="@_contactFormLayoutData" ServicesNames="@_serviceNames"
            SelectedService="@_selectedService?.Name" />
    </Modal>
</nav>

@code {
    [Inject] private IJSRuntime Js { get; set; } = null!;
    [Inject] private PortfolioData AppContent { get; set; } = null!;
    [Inject] private SelectedServiceState SelectedServiceState { get; set; } = null!;
    [Inject] private ScrollLockService ScrollLockService { get; set; } = null!;

    private bool _isSidebarOpen = false;
    private bool _isContactModalVisible = false;

    private BrandInfo _brand => AppContent.User.Brand;
    private NavigationLinkInfo _contactMeLink => AppContent.Layout.ContactMeLink;
    private List<NavigationLinkInfo> _navigationLinks => AppContent.Layout.NavigationLinks;
    private ContactFormInfo _contactFormLayoutData => AppContent.Layout.ContactForm;

    private ServiceInfo? _selectedService;
    private List<string> _serviceNames = [];

    private DotNetObjectReference<NavMenu>? _objectReference;

    private bool _isOpeningContactModal = false;

    [JSInvokable]
    public void OnResize(int width)
    {
        if (width >= 992 && _isSidebarOpen)
        {
            _isSidebarOpen = false;
            StateHasChanged();
        }
    }

    private void ToggleSidebar() => _isSidebarOpen = !_isSidebarOpen;

    private async Task ShowContactModal()
    {
        if (_isOpeningContactModal) return;
        _isOpeningContactModal = true;

        ConsumeSelectedService();
        PopulateServicesOffered();

        if (_isSidebarOpen)
        {
            _isSidebarOpen = false;
            await InvokeAsync(StateHasChanged);
            await ScrollLockService!.UnlockScrollAsync(); // release sidebar scroll lock first
        }

        _isContactModalVisible = true;
        await InvokeAsync(StateHasChanged);

        _isOpeningContactModal = false;
    }

    private Task OnModalVisibilityChanged(bool value)
    {
        _isContactModalVisible = value;
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Js is not null)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("resizeNotifier.registerResizeCallback", _objectReference);
        }
    }

    private void ConsumeSelectedService()
    {
        _selectedService = SelectedServiceState?.ConsumeSelectedService();
    }

    private void PopulateServicesOffered()
    {
        _serviceNames.Clear();

        if (AppContent?.User is null) return;

        foreach (ServiceInfo serviceInfo in AppContent.User.Services)
        {
            _serviceNames.Add(serviceInfo.Name);
        }

        _serviceNames.Add("Others");
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}
