@inject IJSRuntime Js
@implements IDisposable

<nav class="top-nav">
    <div class="nav-container">
        <Brand BrandInfo="@AppLayoutData.BrandInfo" />

        <div class="nav-center">
            @foreach (NavigationLinkItemInfo item in AppLayoutData.NavigationLinks)
            {
                <NavLinkItem NavigationLinkInfo="item" />
            }
        </div>

        <div class="nav-right">
            <NavLinkItem NavigationLinkInfo="@AppLayoutData.ContactLink"/>
        </div>

        <button class="menu-toggle" @onclick="ToggleSidebar">☰</button>
    </div>
</nav>

<SideMenu IsOpened="@isSidebarOpen" OnClose="@ToggleSidebar" />

@code {
    private DotNetObjectReference<NavMenu>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await Js.InvokeVoidAsync("resizeNotifier.registerResizeCallback", dotNetRef);
        }
    }

    [JSInvokable]
    public void OnResize(int width)
    {
        if (width > 920 && isSidebarOpen)
        {
            isSidebarOpen = false;
            StateHasChanged();
        }
    }

    private bool isSidebarOpen = false;
    private void ToggleSidebar() => isSidebarOpen = !isSidebarOpen;

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
