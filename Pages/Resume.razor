@page "/resume"

<div class="resume">
    <div class="resume__nav">
        <h2 class="resume__title">@_resumeHeader.Title</h2>
        <p class="resume__subtitle">@_resumeHeader.Subtitle</p>

        <div class="resume__nav-button-wrapper">
            @for (int i = 0; i < _resumeSections.Count; i++)
            {
                if (_resumeSections[i] is null) continue;
                ResumeTabItemLayoutData section = _resumeSections[i];

                <button class="resume__nav-button @(_currentSection == section.Key ? "resume__nav-button--active" : "")"
                    @onclick="@(() => SelectSection(section.Key))">
                    @(section.Label)
                </button>
            }
        </div>
    </div>

    <div class="resume__content">
        @RenderActiveSection()
    </div>
</div>

@code {
    [Inject] private AppContent? AppContent { get; set; }

    private ResumeHeaderLayoutData _resumeHeader => AppContent?.Layout?.ResumeHeaderLayoutData ?? new();
    private List<ResumeTabItemLayoutData> _resumeSections => AppContent?.Layout?.ResumeTabItemLayoutData.Where(x => x is not
    null).ToList() ?? [];

    private string _currentSection = "AboutMe";

    private void SelectSection(string section)
    {
        _currentSection = section;
    }

    private RenderFragment RenderActiveSection()
    {
        switch (_currentSection)
        {
            case "AboutMe":
                return @<AboutMeSection />;

            case "Education":
                return @<EducationSection />;

            case "Experience":
                return @<ExperienceSection />;

            case "Skills":
                return @<SkillSection />;

            default:
                return @<UnknownSection />;
        }
    }
}
